@using MediaFilesAPI
@using System.Runtime.InteropServices
@using System.Text
@using SkypeVoiceChanger.Effects
@using System.Diagnostics
@inject MediaFiles MediaFiles
@implements IDisposable

<svg @onclick="@OnInitializedAsync" class="waveform" stroke="currentColor" xmlns="http://www.w3.org/2000/svg">
    <path d="@svg?.TopPath" />
    <path d="@svg?.BottomPath" opacity="0.5" />
</svg>

<div class="file-actions">
    <button @onclick="TogglePlayingAudioAsync" is-playing="@(playingSource is not null)">
        <svg class="play-icon w-6 h-6" xmlns="http://www.w3.org/2000/svg" viewBox="-2 -1 26 26" fill="currentColor"><path fill-rule="evenodd" d="M4.5 5.653c0-1.426 1.529-2.33 2.779-1.643l11.54 6.348c1.295.712 1.295 2.573 0 3.285L7.28 19.991c-1.25.687-2.779-.217-2.779-1.643V5.653z" clip-rule="evenodd" /></svg><svg class="stop-icon w-6 h-6" xmlns="http://www.w3.org/2000/svg" viewBox="-2 -2 28 28" fill="currentColor"><path fill-rule="evenodd" d="M4.5 7.5a3 3 0 013-3h9a3 3 0 013 3v9a3 3 0 01-3 3h-9a3 3 0 01-3-3v-9z" clip-rule="evenodd" /></svg>
    </button>
    @if (!effectInProcess)
    {
        @* Button to apply audio effect *@
        <button @onclick="ChangeVoiceAsync">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="w-6 h-6"><path fill-rule="evenodd" d="M11.828 2.25c-.916 0-1.699.663-1.85 1.567l-.091.549a.798.798 0 01-.517.608 7.45 7.45 0 00-.478.198.798.798 0 01-.796-.064l-.453-.324a1.875 1.875 0 00-2.416.2l-.243.243a1.875 1.875 0 00-.2 2.416l.324.453a.798.798 0 01.064.796 7.448 7.448 0 00-.198.478.798.798 0 01-.608.517l-.55.092a1.875 1.875 0 00-1.566 1.849v.344c0 .916.663 1.699 1.567 1.85l.549.091c.281.047.508.25.608.517.06.162.127.321.198.478a.798.798 0 01-.064.796l-.324.453a1.875 1.875 0 00.2 2.416l.243.243c.648.648 1.67.733 2.416.2l.453-.324a.798.798 0 01.796-.064c.157.071.316.137.478.198.267.1.47.327.517.608l.092.55c.15.903.932 1.566 1.849 1.566h.344c.916 0 1.699-.663 1.85-1.567l.091-.549a.798.798 0 01.517-.608 7.52 7.52 0 00.478-.198.798.798 0 01.796.064l.453.324a1.875 1.875 0 002.416-.2l.243-.243c.648-.648.733-1.67.2-2.416l-.324-.453a.798.798 0 01-.064-.796c.071-.157.137-.316.198-.478.1-.267.327-.47.608-.517l.55-.091a1.875 1.875 0 001.566-1.85v-.344c0-.916-.663-1.699-1.567-1.85l-.549-.091a.798.798 0 01-.608-.517 7.507 7.507 0 00-.198-.478.798.798 0 01.064-.796l.324-.453a1.875 1.875 0 00-.2-2.416l-.243-.243a1.875 1.875 0 00-2.416-.2l-.453.324a.798.798 0 01-.796.064 7.462 7.462 0 00-.478-.198.798.798 0 01-.517-.608l-.091-.55a1.875 1.875 0 00-1.85-1.566h-.344zM12 15.75a3.75 3.75 0 100-7.5 3.75 3.75 0 000 7.5z" clip-rule="evenodd" /></svg>
        </button>
    }
    else
    {
        @* Spinner while processing *@
        <svg class="processing-icon w-6 h-6" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="black"><path fill-rule="evenodd" d="M4.755 10.059a7.5 7.5 0 0112.548-3.364l1.903 1.903h-3.183a.75.75 0 100 1.5h4.992a.75.75 0 00.75-.75V4.356a.75.75 0 00-1.5 0v3.18l-1.9-1.9A9 9 0 003.306 9.67a.75.75 0 101.45.388zm15.408 3.352a.75.75 0 00-.919.53 7.5 7.5 0 01-12.548 3.364l-1.902-1.903h3.183a.75.75 0 000-1.5H2.984a.75.75 0 00-.75.75v4.992a.75.75 0 001.5 0v-3.18l1.9 1.9a9 9 0 0015.059-4.035.75.75 0 00-.53-.918z" clip-rule="evenodd" /></svg>
    }
    @message
</div>

@code {
    [Parameter, EditorRequired] public MediaFiles.JSFile File { get; set; } = default!;

    WaveformSvg? svg;
    IJSObjectReference? playingSource;
    bool effectInProcess;
    string? message;

    CancellationTokenSource disposalCts = new();

    protected override async Task OnInitializedAsync()
    {
        var data = await MediaFiles.DecodeAudioFileAsync(File);
        var sw = new Stopwatch();
        await Task.Run(() =>
        {
            sw.Start();
            svg = GenerateWaveformSvg(data);
            sw.Stop();
        }, disposalCts.Token);
        message = $"{sw.ElapsedMilliseconds:F1}ms";
    }

    public void Dispose()
        => disposalCts.Cancel();

    async Task TogglePlayingAudioAsync()
    {
        if (playingSource is null)
        {
            // This file isn't playing, so play it
            playingSource = await MediaFiles.PlayAudioFileAsync(File);
        }
        else
        {
            // This file is already playing, so stop it
            await playingSource.InvokeVoidAsync("stop");
            await playingSource.DisposeAsync();
            playingSource = null;
        }
    }

    async Task ChangeVoiceAsync()
    {
        effectInProcess = true;
        var audioData = await MediaFiles.DecodeAudioFileAsync(File);

        var sw = new Stopwatch();
        await Task.Run(() =>
        {
            sw.Start();
            ChangeVoiceCore(audioData);
            sw.Stop();
        });

        message = $"Effect: {sw.ElapsedMilliseconds:F1}ms";
        effectInProcess = false;

        // Autoplay
        playingSource = await MediaFiles.PlayAudioDataAsync(audioData);
    }

    void ChangeVoiceCore(byte[] samplesData)
    {
        var audioDataFloat = MemoryMarshal.Cast<byte, float>(samplesData);
        var effect = new SuperPitch();
        effect.SliderChanged();
        effect.Init();

        for (var i = 0; i < audioDataFloat.Length; i++)
        {
            effect.OnSample(ref audioDataFloat[i]);
        }

        svg = GenerateWaveformSvg(samplesData);
    }

    record WaveformSvg(string TopPath, string BottomPath);

    WaveformSvg GenerateWaveformSvg(byte[] samplesData)
    {
        // Generates repeated strings like "M 0 38 v 8"
        var audioDataFloat = MemoryMarshal.Cast<byte, float>(samplesData);
        var width = 400;
        var height = 64;
        var topPath = new StringBuilder(15 * width);
        var botPath = new StringBuilder(15 * width);
        var numSamples = audioDataFloat.Length;
        var samplesPerColumn = numSamples / width;
        var minusHalfHeight = -height / 2;
        var midpointHeightStr = ((int)(height * 0.6)).ToString();

        for (var x = 0; x < width; x++)
        {
            var chunk = audioDataFloat.Slice(x * samplesPerColumn, samplesPerColumn);
            var min = chunk[0];
            var max = chunk[0];
            var sampleResolution = 8;
            for (var i = sampleResolution; i < chunk.Length; i += sampleResolution)
            {
                ref var sample = ref chunk[i];
                if (sample < min) min = sample;
                if (sample > max) max = sample;
            }

            topPath.Append('M').Append(x).Append(' ').Append(midpointHeightStr).Append('v').Append((int)(minusHalfHeight * max));
            botPath.Append('M').Append(x).Append(' ').Append(midpointHeightStr).Append('v').Append((int)(minusHalfHeight * min / 2));
        }

        return new WaveformSvg(topPath.ToString(), botPath.ToString());
    }
}
